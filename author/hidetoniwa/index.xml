<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HidetoNiwa | どと～るブログ</title><link>https://www.hahahahaha-nnn.work/author/hidetoniwa/</link><atom:link href="https://www.hahahahaha-nnn.work/author/hidetoniwa/index.xml" rel="self" type="application/rss+xml"/><description>HidetoNiwa</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja</language><lastBuildDate>Sat, 01 Jan 2022 07:24:03 +0000</lastBuildDate><image><url>https://www.hahahahaha-nnn.work/img/twitter-card.jpg</url><title>HidetoNiwa</title><link>https://www.hahahahaha-nnn.work/author/hidetoniwa/</link></image><item><title>Twitterカードの作り方</title><link>https://www.hahahahaha-nnn.work/post/how_to_make_custom_card/</link><pubDate>Sat, 01 Jan 2022 07:24:03 +0000</pubDate><guid>https://www.hahahahaha-nnn.work/post/how_to_make_custom_card/</guid><description>&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>お久しぶりです。どと〜ること、にゎ〜んです。先日、このブログにページごとのTwitterカード画像を生成して適用させることができるようになったと、Tweetしました。このページではその方法に関して説明していきたいと思います。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">久しぶりに、自分のブログに機能を実装した～&lt;br>Pythonで、&lt;br>・記事タイトルを取得&lt;br>・記事タイトルから、Twitterカード用画像を自動生成&lt;br>・Twitterカード用画像を記事中に指定して反映&lt;br>させるようにした！&lt;br>&lt;br>Qiitaの記事のようなカッコいいカードが生成されるようになった！&lt;a href="https://t.co/aJn4YhTENW">https://t.co/aJn4YhTENW&lt;/a>&lt;/p>&amp;mdash; どと～る☕ (@hahahahaha_NNN) &lt;a href="https://twitter.com/hahahahaha_NNN/status/1477264343045574656?ref_src=twsrc%5Etfw">January 1, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h3 id="環境">環境&lt;/h3>
&lt;p>今回使用した環境は下記に列挙する環境です。version等揃える必要なない（と思う）ですが、この環境で作ってたんだーくらいは感じてください。&lt;/p>
&lt;ul>
&lt;li>Hugo Extended&lt;/li>
&lt;li>GitHub Pages&lt;/li>
&lt;li>Python3.8&lt;/li>
&lt;/ul>
&lt;h2 id="twitterカードとは">Twitterカードとは？&lt;/h2>
&lt;p>先述のTweetの様に、Twitterにリンクを共有した際に、リンクが画像として表示される機能です。&lt;/p>
&lt;p>&amp;lt;メリット&amp;gt;&lt;/p>
&lt;ul>
&lt;li>Twitter上で画像でリンクが出るのでクリックされやすい&lt;/li>
&lt;/ul>
&lt;p>&amp;lt;デメリット&amp;gt;&lt;/p>
&lt;ul>
&lt;li>クライアント側でTweetを見たときに画像を取得するので、データ通信量/サーバへの負荷がかかる？（多分）&lt;/li>
&lt;/ul>
&lt;p>まぁ、圧倒的にメリット＞デメリットなので設定したほうがいいですね。&lt;/p>
&lt;h2 id="実装">実装&lt;/h2>
&lt;p>では、いざ実装しましょう。下記のような順番で実装を行っていきます。&lt;/p>
&lt;ul>
&lt;li>画像生成
&lt;ul>
&lt;li>画像へブログ名＆記事名追加&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>画像を記事に適用&lt;/li>
&lt;li>記事からカードを適用&lt;/li>
&lt;/ul>
&lt;p>これらの処理には、一部の界隈で嫌われがちなPythonを用いました。（Python3.8）
Pythonを利用した理由は、&lt;/p>
&lt;ul>
&lt;li>画像処理等の実装がライブラリを使って行うので楽&lt;/li>
&lt;li>Windows,UbuntuなどOS間の互換性が高い&lt;/li>
&lt;/ul>
&lt;p>と感じたからです。&lt;/p>
&lt;details>
&lt;summary>&lt;a href="https://github.com/HidetoNiwa/HP/blob/master/python/make-card-pic.py">実装したコード&lt;/a>（Python）&lt;/summary>
&lt;script src="https://gist.github.com/HidetoNiwa/1e0f7220cc8f4ddc4dd90d090d108622.js" data-gist-line="1-20">&lt;/script>
&lt;/details>
&lt;h3 id="ベース画像の準備">ベース画像の準備&lt;/h3>
&lt;p>まずは、カードのベースとなる画像を用意します。今回は下記の画像を用いました。&lt;/p>
&lt;figure id="figure-ベース画像">
&lt;a data-fancybox="" href="https://github.com/HidetoNiwa/HP/blob/master/python/card.png?raw=true" data-caption="ベース画像">
&lt;img src="https://github.com/HidetoNiwa/HP/blob/master/python/card.png?raw=true" alt="" >
&lt;/a>
&lt;figcaption>
ベース画像
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="記事一覧を取得">記事一覧を取得&lt;/h3>
&lt;p>記事一覧の取得を行うため、/content/以下のディレクトリの取得を行いました。また、記事ではないページのmarkdownの取得を行わないため、別途ignoreリストを作成して、除外しました。&lt;/p>
&lt;p>また、Python標準ライブラリである、globを用いているのでimportします。&lt;/p>
&lt;pre>&lt;code class="language-Python">import glob
ignore_list = {&amp;quot;./content/privacy.md&amp;quot;, &amp;quot;./content/terms.md&amp;quot;,&amp;quot;./content/authors/niwa/_index.md&amp;quot;,&amp;quot;./content/home/about.md&amp;quot;,&amp;quot;./content/home/index.md&amp;quot;,&amp;quot;./content/home/posts.md&amp;quot;,&amp;quot;./content/home/skills.md&amp;quot;,&amp;quot;./content/post/_index.md&amp;quot;,&amp;quot;./content/publication/_index.md&amp;quot;,&amp;quot;./content/talk/_index.md&amp;quot;}
def get_dir():
path = './content/**/*.md'
file_list = glob.glob(path, recursive=True)
file_list = list(filter(lambda x: x not in ignore_list, file_list))
return file_list
&lt;/code>&lt;/pre>
&lt;h3 id="記事からのタイトル取得">記事からのタイトル取得&lt;/h3>
&lt;p>記事からタイトルの取得を行うため、前に取得した記事リストから順にファイルオープンを行い記事のタイトルの抽出を行いました。&lt;/p>
&lt;pre>&lt;code class="language-Python">def get_title(file_path):
print(&amp;quot;Open file...&amp;quot;, file_path)
f = open(file_path, 'r', encoding=&amp;quot;utf-8&amp;quot;) # File Open（文字コード指定）
datalist = f.readlines()
f.close()
title_string = &amp;quot;title: &amp;quot;
for i in range(len(datalist)):
text = datalist[i]
title = text.split('&amp;quot;')
if title[0] == title_string:
break
print(title)
return title[1]
&lt;/code>&lt;/pre>
&lt;h3 id="カード画像に文字入れ">カード画像に文字入れ&lt;/h3>
&lt;p>カード中に文字を入れるため、Pillowと呼ばれるPythonの画像ライブラリを用いました。これは、Pythonのライブラリとなるので、入っていない場合は下記コマンドで入れます。&lt;/p>
&lt;pre>&lt;code class="language-bash">pip3 install Pillow
&lt;/code>&lt;/pre>
&lt;p>このPillowを用いて、画像中に文字を入れています。文字のフォントは
&lt;a href="https://fonts.google.com/" target="_blank" rel="noopener">Google Fonts&lt;/a>のものを利用させていただきました。&lt;/p>
&lt;p>今回の関数では、フォント、画像ファイル、文字列、（文字を入れる）x座標、y座標、フォントサイズ、文字色を引数として扱っています。&lt;/p>
&lt;pre>&lt;code class="language-Python">from PIL import Image, ImageDraw, ImageFont
def make_image(font_path, img_path, text, x=0.0, y=0.0, font_size=32, font_color=&amp;quot;black&amp;quot;):
font = ImageFont.truetype(font_path, font_size)
img = Image.open(img_path)
img_d = ImageDraw.Draw(img)
text_size = img_d.textsize(text, font) # テキストサイズの取得
img_d.text((x-(text_size[0]/2), y-(text_size[1]/2)),
text, fill=font_color, font=font)
img.save(img_path)
&lt;/code>&lt;/pre>
&lt;h3 id="記事タイトル文字数取得">記事タイトル文字数取得&lt;/h3>
&lt;p>記事タイトルが長すぎると、Twitterカード上の収まりが悪くなってしまいます。そのことを防ぐため、全角文字7文字以上で、&lt;/p>
&lt;p>文字サイズが小さくなるようにしました。その際、文字カウントを行ったのが下記コードになります。その際、UnicodedataといったPythonの標準ライブラリを用いてます。&lt;/p>
&lt;pre>&lt;code class="language-Python">import unicodedata
def get_east_asian_width_count(text):
count = 0
for c in text:
if unicodedata.east_asian_width(c) in 'FWA':
count += 2
else:
count += 1
return count
&lt;/code>&lt;/pre>
&lt;h3 id="記事にカード画像をリンク">記事にカード画像をリンク&lt;/h3>
&lt;p>Hugoでは、最初の方に&amp;rdquo;&amp;mdash;&amp;ldquo;で囲まれた部分があります。そこを、Front Matterと呼びます。&lt;/p>
&lt;p>このFront Matterと呼ばれる部分に、カード画像の保存場所を明記していきます。&lt;/p>
&lt;p>今回は、&amp;ldquo;card_image:&amp;ldquo;の後ろにカードのディレクトリを追記する形にしています。&lt;/p>
&lt;p>また、すでに記載されているかどうかの判定も行っています。（2重で記載するの防ぐため）&lt;/p>
&lt;pre>&lt;code class="language-Python">def add_card_info(file_path,card_path):
f = open(file_path, 'r', encoding=&amp;quot;utf-8&amp;quot;) # File Open（文字コード指定）
datalist = f.readlines()
f.close()
card_path = card_path[13:]
img_string = &amp;quot;card_image:&amp;quot;
section_string = &amp;quot;---&amp;quot;
start_formatter = False
img_info = False
for i in range(len(datalist)):
text = datalist[i][:11]
if text == img_string:
img_info = True
break
text = text[:3]
if text == section_string:
if start_formatter:
break
else:
start_formatter=True
card_info = img_string + &amp;quot; &amp;quot; + '&amp;quot;'+card_path+'&amp;quot;\n'
if img_info:
datalist[i]=card_info
else:
datalist.insert(14,card_info)
f = open(file_path, 'w', encoding=&amp;quot;utf-8&amp;quot;) # File Open（文字コード指定）
f.writelines(datalist)
f.close()
return text
&lt;/code>&lt;/pre>
&lt;h3 id="hugo-themeに適用">Hugo Themeに適用&lt;/h3>
&lt;p>さて、ここまでで、画像の生成・画像と記事の紐づけができました。最後は、HTMLにこのカードを紐づけましょう。&lt;/p>
&lt;p>自分が用いているテーマ（academic）では、これらの情報は /layouts/partials/site_head.htmlに記載されていました。&lt;/p>
&lt;blockquote>
&lt;p>基本的には&lt;head>タグ内に書けば大丈夫です。&lt;/p>
&lt;/blockquote>
&lt;p>実際に、カード画像を指定しているのは下記HTML文になります。つまりは、ここに画像が適用されれば良いです。&lt;/p>
&lt;pre>&lt;code class="language-HTML">&amp;lt;meta property=&amp;quot;og:image&amp;quot; content=&amp;quot;{{.}}&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;twitter:image&amp;quot; content=&amp;quot;{{.}}&amp;quot;&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>自分の環境では、$og_imageにうまいこと代入されれば良い感じでした。そこで下記のように編集しました。&lt;/p>
&lt;p>isset .Params &amp;ldquo;card_image&amp;rdquo;：これは、&amp;ldquo;card_image&amp;quot;が記事中で設定されていますよといった意味になります。&lt;/p>
&lt;p>そして、.Params.card_imageで記事から保存場所を引っ張ってきています。&lt;/p>
&lt;pre>&lt;code class="language-GO">{{ else if isset .Params &amp;quot;card_image&amp;quot; }}&amp;lt;!--Twitterカード等に用いられる画像があるかの判定、Front Matter--&amp;gt;
{{ $og_image = printf &amp;quot;img/%s&amp;quot; .Params.card_image | absURL }}
&lt;/code>&lt;/pre>
&lt;h2 id="python動作">Python動作&lt;/h2>
&lt;p>さて、これでPythonを動作させて画像の生成・記事へファイルのリンクを行えば大丈夫です。Pythonファイルを、/python/make-card-pic.pyに保存しました。&lt;/p>
&lt;p>このファイルを実行するために、Hugoのトップディレクトリで下記コマンドを実行すれば自動で画像を生成してくれます！&lt;/p>
&lt;pre>&lt;code class="language-bash">python3 ./python/make-card-pic.py
&lt;/code>&lt;/pre>
&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>この記事を書いていたら思ったよりも長くなってしまいました。まぁ、これ関連のコード作成も研究等の兼ね合いから、1年くらいしてた気がします。&lt;/p>
&lt;p>現状、ローカルで画像を生成してコミットする形となってしまっているのが欠点です。また、記事のMarkDownがリネームされると対応できません。&lt;/p>
&lt;p>Draft（下書き）状態の記事にも画像を生成してしまいます&amp;hellip;これらを踏まえると、下記の機能を実装したいですね。&lt;/p>
&lt;ul>
&lt;li>GitHub Actionsで記事がGitHub Pagesに公開されるときに同時にカード画像が生成されるようにする&lt;/li>
&lt;li>使用されていない画像が無いか確認する&lt;/li>
&lt;li>Title取得時にDraftかどうかの判定を行う&lt;/li>
&lt;/ul>
&lt;p>最後まで読んでくれてありがとうございました！&lt;/p></description></item><item><title>git コマンド集</title><link>https://www.hahahahaha-nnn.work/pages/git-command/</link><pubDate>Thu, 23 Sep 2021 00:43:38 +0900</pubDate><guid>https://www.hahahahaha-nnn.work/pages/git-command/</guid><description>&lt;p>
&lt;a href="https://github.com/" target="_blank" rel="noopener">GitHub&lt;/a>など、ソースコード管理でよく使われるgit。&lt;/p>
&lt;p>Visual Studio CodeなどでGUIでgitを使うこともできますが、やはり細かい操作はコマンドラインでしたいですよね！（実際に筆者はそう思っています。）&lt;/p>
&lt;p>そのコマンドラインでの備忘録として、まとめています。使うコマンドが増えれば追記していきます（たぶん）&lt;/p>
&lt;h2 id="clone系">clone系&lt;/h2>
&lt;pre>&lt;code class="language-bash">git clone &amp;lt;URL&amp;gt; &amp;lt;cloneするフォルダ名&amp;gt;
&lt;/code>&lt;/pre>
&lt;h2 id="branch系">branch系&lt;/h2>
&lt;h3 id="ローカルのbranch名変更">ローカルのbranch名変更&lt;/h3>
&lt;pre>&lt;code class="language-bash">git branch -m &amp;lt;古いブランチ名&amp;gt; &amp;lt;新しいブランチ名&amp;gt;
&lt;/code>&lt;/pre>
&lt;h2 id="add系">add系&lt;/h2>
&lt;p>gitで次にcommitするファイルの追加&lt;/p>
&lt;pre>&lt;code class="language-bash">git add -A #全てのファイルの場合
&lt;/code>&lt;/pre>
&lt;h2 id="commit系">commit系&lt;/h2>
&lt;h3 id="コミットメッセージ付けてcommit">コミットメッセージ付けてcommit&lt;/h3>
&lt;pre>&lt;code class="language-bash">git commit -m &amp;quot;（コミットメッセージ）&amp;quot;
&lt;/code>&lt;/pre>
&lt;h2 id="push系">push系&lt;/h2>
&lt;p>オンラインサーバへpush&lt;/p>
&lt;h3 id="originサーバへbranchを追加">originサーバへbranchを追加&lt;/h3>
&lt;pre>&lt;code class="language-bash">git push --set-upstream origin &amp;lt;branch名&amp;gt;
&lt;/code>&lt;/pre>
&lt;h3 id="originサーバへpush">originサーバへpush&lt;/h3>
&lt;pre>&lt;code class="language-bash">git push
&lt;/code>&lt;/pre></description></item><item><title>CubeIDEコード整形</title><link>https://www.hahahahaha-nnn.work/post/cubeide-formmating/</link><pubDate>Tue, 29 Dec 2020 10:55:40 +0900</pubDate><guid>https://www.hahahahaha-nnn.work/post/cubeide-formmating/</guid><description>&lt;p>お久しぶりです，にゎ～んです．さて，今回はCubeIDEにおけるコード整形のお話を書いていきたいと思います．&lt;/p>
&lt;h2 id="手動整形">手動整形&lt;/h2>
&lt;p>整形したいファイル上で，「Ctrl」+「Shift」+「f」を押します．
すると，下図のような選択が出てくるので好きな方を選んで「OK」を押します．&lt;/p>
&lt;ul>
&lt;li>そのファイル全部を行う．&lt;/li>
&lt;li>その行のみ行う．&lt;/li>
&lt;/ul>
&lt;figure id="figure-コード整形選択肢">
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/CubeIDE/Formmating.PNG" data-caption="コード整形選択肢">
&lt;img src="https://www.hahahahaha-nnn.work/img/post/CubeIDE/Formmating.PNG" alt="" width="250px" >
&lt;/a>
&lt;figcaption>
コード整形選択肢
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="自動整形">自動整形&lt;/h2>
&lt;p>ページ上部の「Window」&amp;gt;「Preference」をクリック.&lt;/p>
&lt;figure id="figure-windowpreference">
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/CubeIDE/Formmating2.PNG" data-caption="「Window」&amp;gt;「Preference」">
&lt;img src="https://www.hahahahaha-nnn.work/img/post/CubeIDE/Formmating2.PNG" alt="" width="450px" >
&lt;/a>
&lt;figcaption>
「Window」&amp;gt;「Preference」
&lt;/figcaption>
&lt;/figure>
&lt;p>Preference中の「C/C++」&amp;gt;「Editor」&amp;gt;「Save Actions」の&amp;quot;Format source code&amp;quot;にチェックを入れ，下の&amp;quot;Apply and Close&amp;quot;をクリック．&lt;/p>
&lt;figure id="figure-windowpreference">
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/CubeIDE/Formmating3.PNG" data-caption="「Window」&amp;gt;「Preference」">
&lt;img src="https://www.hahahahaha-nnn.work/img/post/CubeIDE/Formmating3.PNG" alt="" width="450px" >
&lt;/a>
&lt;figcaption>
「Window」&amp;gt;「Preference」
&lt;/figcaption>
&lt;/figure></description></item><item><title>Sample</title><link>https://www.hahahahaha-nnn.work/sample/</link><pubDate>Mon, 09 Nov 2020 17:52:24 +0900</pubDate><guid>https://www.hahahahaha-nnn.work/sample/</guid><description>&lt;p>サンプル表示ページです。それぞれの記法を参考にしてみてください。
&lt;a href="https://qiita.com/Minalinsky_1911/items/b684cfabe0f2fde0c67b" target="_blank" rel="noopener">参考リンク&lt;/a>&lt;/p>
&lt;h2 id="各レベル表示">各レベル表示&lt;/h2>
&lt;h1 id="h1">h1&lt;/h1>
&lt;h2 id="h2">h2&lt;/h2>
&lt;h3 id="h3">h3&lt;/h3>
&lt;h4 id="h4">h4&lt;/h4>
&lt;h5 id="h5">h5&lt;/h5>
&lt;h6 id="h6">h6&lt;/h6>
&lt;h2 id="リンク">リンク&lt;/h2>
&lt;p>&lt;a href="https://www.robohan.net/">https://www.robohan.net/&lt;/a>&lt;/p>
&lt;p>
&lt;a href="https://www.robohan.net/" target="_blank" rel="noopener">RobohanHP&lt;/a>&lt;/p>
&lt;h2 id="太字斜体">太字・斜体&lt;/h2>
&lt;p>&lt;strong>太字&lt;/strong>や&lt;em>斜体&lt;/em>を表示させるとこうなります。&lt;strong>Bold&lt;/strong>や&lt;em>italic&lt;/em>&lt;/p>
&lt;h2 id="リスト">リスト&lt;/h2>
&lt;ul>
&lt;li>記号型のリスト&lt;/li>
&lt;li>レベル1
&lt;ul>
&lt;li>レベル2
&lt;ul>
&lt;li>レベル3
&lt;ul>
&lt;li>レベル4
&lt;ul>
&lt;li>レベル5&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>数字型のリスト&lt;/li>
&lt;li>レベル1
&lt;ol>
&lt;li>レベル2
&lt;ol>
&lt;li>レベル3
&lt;ol>
&lt;li>レベル4
&lt;ol>
&lt;li>レベル5&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="表">表&lt;/h2>
&lt;h3 id="中央揃え基本形">中央揃え（基本形）&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A1&lt;/th>
&lt;th>B1&lt;/th>
&lt;th>C1&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>A2&lt;/td>
&lt;td>B2&lt;/td>
&lt;td>C2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A3&lt;/td>
&lt;td>B3&lt;/td>
&lt;td>C3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A4&lt;/td>
&lt;td>B4&lt;/td>
&lt;td>C4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="表の様々な揃え方">表の様々な揃え方&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">左揃え&lt;/th>
&lt;th>中央揃え&lt;/th>
&lt;th align="right">右揃え&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">A2&lt;/td>
&lt;td>B2&lt;/td>
&lt;td align="right">C2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">A3&lt;/td>
&lt;td>B3&lt;/td>
&lt;td align="right">C3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">A4&lt;/td>
&lt;td>B4&lt;/td>
&lt;td align="right">C4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="ソースコード">ソースコード&lt;/h2>
&lt;pre>&lt;code class="language-C">
#include&amp;lt;stdio.h&amp;gt;
int main(void){
printf(&amp;quot;Hello World?&amp;quot;);
return 0;
}
&lt;/code>&lt;/pre>
&lt;h2 id="引用">引用&lt;/h2>
&lt;blockquote>
&lt;p>まことに小さな国が、開化期を迎えようとしている。&lt;/p>
&lt;p>小さなといえば、明治初年の日本ほど小さな国はなかったであろう。&lt;/p>
&lt;p>産業といえば農業しかなく、人材といえば三百年の間、読書階級であった旧士族しかなかった。&lt;/p>
&lt;p>明治維新によって、日本人ははじめて近代的な「国家」というものをもった。誰もが「国民」になった。&lt;/p>
&lt;p>不慣れながら「国民」になった日本人たちは、日本史上の最初の体験者としてその新鮮さに昂揚した。&lt;/p>
&lt;p>この痛々しいばかりの昂揚がわからなければ、この段階の歴史はわからない。&lt;/p>
&lt;blockquote>
&lt;p>スペシャルドラマ坂の上の雲 - NHK　冒頭&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;h2 id="取り消し線">取り消し線&lt;/h2>
&lt;p>&lt;del>取り消し線&lt;/del>&lt;/p>
&lt;h2 id="hugoショートコード">Hugoショートコード&lt;/h2>
&lt;p>代表的なものだけを列挙します。
その他は、
&lt;a href="https://gohugo.io/content-management/shortcodes/" target="_blank" rel="noopener">参考リンク&lt;/a>参照。&lt;/p>
&lt;h3 id="画像">画像&lt;/h3>
&lt;figure id="figure-robohan-logo">
&lt;a data-fancybox="" href="https://www.miraikikin.osaka-u.ac.jp/wp-content/uploads/2020/03/prj65.jpg" data-caption="Robohan Logo">
&lt;img src="https://www.miraikikin.osaka-u.ac.jp/wp-content/uploads/2020/03/prj65.jpg" alt="" width="500px" >
&lt;/a>
&lt;figcaption>
Robohan Logo
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="youtube">Youtube&lt;/h3>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/q1UOki3PdAM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>元リンク：
&lt;a href="https://www.youtube.com/watch?v=q1UOki3PdAM" target="_blank" rel="noopener">https://www.youtube.com/watch?v=q1UOki3PdAM&lt;/a>&lt;/p>
&lt;h3 id="tweet">Tweet&lt;/h3>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">本日RobohanのTwitterは10周年を迎えました❗&lt;br>&lt;br>先輩方の技術を受け継ぎ、来たるNHKロボコン2021に向けて、そしてその先に向けてがんばっていきます。&lt;br>&lt;br>今後もRobohanをよろしくお願いします❗&lt;br>&lt;br>1枚目:NHKロボコン2010&lt;br>2枚目:NHKロボコン2011&lt;br>3枚目:2020年度新歓の様子&lt;a href="https://twitter.com/hashtag/%E3%83%AD%E3%83%9C%E3%82%B3%E3%83%B3?src=hash&amp;amp;ref_src=twsrc%5Etfw">#ロボコン&lt;/a> &lt;a href="https://t.co/sCwP3YmaGw">pic.twitter.com/sCwP3YmaGw&lt;/a>&lt;/p>&amp;mdash; 大阪大学Robohan（ロボット製作団体） (@Robohan_) &lt;a href="https://twitter.com/Robohan_/status/1322437654475010048?ref_src=twsrc%5Etfw">October 31, 2020&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>元リンク：
&lt;a href="https://twitter.com/Robohan_/status/1322437654475010048" target="_blank" rel="noopener">https://twitter.com/Robohan_/status/1322437654475010048&lt;/a>&lt;/p></description></item><item><title>公開資料</title><link>https://www.hahahahaha-nnn.work/pages/resource/</link><pubDate>Wed, 07 Oct 2020 00:45:12 +0900</pubDate><guid>https://www.hahahahaha-nnn.work/pages/resource/</guid><description>&lt;p>インターネット上に公開している各種資料をまとめたページとなります。&lt;/p>
&lt;h2 id="robohanにおける回路構成201712">Robohanにおける回路構成（2017/12）&lt;/h2>
&lt;p>発表日：2017/12/??&lt;/p>
&lt;p>Robohanにおける回路構成をまとめた資料。（2017/12現在のものとなるので現在とは構成は異なります。）&lt;/p>
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/iBFMvoXsLhSWH7" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> &lt;/iframe> &lt;div style="margin-bottom:5px"> &lt;strong> &lt;a href="//www.slideshare.net/ssuser15f197/robohan" title="Robohanにおける回路構成" target="_blank">Robohanにおける回路構成&lt;/a> &lt;/strong> from &lt;strong>&lt;a href="https://www.slideshare.net/ssuser15f197" target="_blank">どと〜る &lt;/a>&lt;/strong> &lt;/div>
&lt;h2 id="arduinoを用いたキソ電子工作-4">Arduinoを用いたキソ電子工作 4&lt;/h2>
&lt;p>発表日：2020/10/28&lt;/p>
&lt;p>母校、高校科学部にてオンライン形式にて説明した資料&lt;/p>
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/wYXcdQY7Z8qf51" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> &lt;/iframe> &lt;div style="margin-bottom:5px"> &lt;strong> &lt;a href="//www.slideshare.net/ssuser15f197/arduino4" title="Arduinoを用いたキソ電子工作-4" target="_blank">Arduinoを用いたキソ電子工作-4&lt;/a> &lt;/strong> from &lt;strong>&lt;a href="https://www.slideshare.net/ssuser15f197" target="_blank">どと〜る &lt;/a>&lt;/strong> &lt;/div>
&lt;h2 id="arduinoを用いたキソ電子工作-3">Arduinoを用いたキソ電子工作 3&lt;/h2>
&lt;p>発表日：2020/10/14&lt;/p>
&lt;p>母校、高校科学部にてオンライン形式にて説明した資料&lt;/p>
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/8aH4bXVbqutitQ" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> &lt;/iframe> &lt;div style="margin-bottom:5px"> &lt;strong> &lt;a href="//www.slideshare.net/ssuser15f197/arduino3-239207264" title="Arduinoを用いたキソ電子工作3" target="_blank">Arduinoを用いたキソ電子工作3&lt;/a> &lt;/strong> from &lt;strong>&lt;a href="https://www.slideshare.net/ssuser15f197" target="_blank">どと〜る &lt;/a>&lt;/strong> &lt;/div>
&lt;h2 id="arduinoを用いたキソ電子工作-2">Arduinoを用いたキソ電子工作 2&lt;/h2>
&lt;p>発表日：2020/10/07&lt;/p>
&lt;p>母校、高校科学部にてオンライン形式にて説明した資料&lt;/p>
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/iVBnMBseaWCzZN" width="592" height="333" frameborder="1" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> &lt;/iframe> &lt;div style="margin-bottom:5px"> &lt;strong> &lt;a href="//www.slideshare.net/ssuser15f197/arduino2-238765276" title="Arduinoを用いたキソ電子工作2" target="_blank">Arduinoを用いたキソ電子工作2&lt;/a> &lt;/strong> from &lt;strong>&lt;a href="https://www.slideshare.net/ssuser15f197" target="_blank">どと〜る &lt;/a>&lt;/strong> &lt;/div>
&lt;h2 id="arduinoを用いたキソ電子工作">Arduinoを用いたキソ電子工作&lt;/h2>
&lt;p>発表日：2020/09/08&lt;/p>
&lt;p>母校、高校科学部にてArduinoを用いた電子工作体験を行いたいとのことで、オンライン形式にて説明に用いた資料&lt;/p>
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/kLdx1ZkmsV02ss" width="592" height="333" frameborder="1" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> &lt;/iframe> &lt;div style="margin-bottom:5px"> &lt;strong> &lt;a href="//www.slideshare.net/ssuser15f197/arduino-238762570" title="Arduinoを用いたキソ電子工作" target="_blank">Arduinoを用いたキソ電子工作&lt;/a> &lt;/strong> from &lt;strong>&lt;a href="https://www.slideshare.net/ssuser15f197" target="_blank">どと〜る &lt;/a>&lt;/strong> &lt;/div>
&lt;h2 id="卒業論文発表口頭試問">卒業論文発表（口頭試問）&lt;/h2>
&lt;p>発表日：2020/02/19&lt;/p>
&lt;p>伸縮性導電性布を用いたフレキシブルストレッチセンサの開発と応用&lt;br>
―やわらかいロボットのためのやわらかいセンサの実現に向けて―&lt;/p>
&lt;p>上記タイトルにて、作成した卒業論文に付随する口頭試問資料&lt;/p>
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/cAYTJCGnBzXtKp" width="592" height="333" frameborder="1" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> &lt;/iframe> &lt;div style="margin-bottom:5px"> &lt;strong> &lt;a href="//www.slideshare.net/ssuser15f197/flexible-stretch-sensor-using-stretchable-conductive-cloth" title="Flexible Stretch Sensor Using Stretchable Conductive Cloth" target="_blank">Flexible Stretch Sensor Using Stretchable Conductive Cloth&lt;/a> &lt;/strong> from &lt;strong>&lt;a href="https://www.slideshare.net/ssuser15f197" target="_blank">どと〜る &lt;/a>&lt;/strong> &lt;/div>
&lt;h2 id="osaka-takoyaki">OSAKA TAKOYAKI&lt;/h2>
&lt;p>発表日：2019/09/16&lt;/p>
&lt;p>RoboMaster大阪チーム OSAKA TAKOYAKI（現在、解体済み）の活動紹介&lt;br>
&lt;a href="https://www.robomaster.jp/summercamp2019/" target="_blank" rel="noopener">RoboMaster Japan サマーキャンプ 2019&lt;/a>活動報告&lt;/p>
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/C3xxcISjAsyL9X" width="592" height="333" frameborder="1" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> &lt;/iframe> &lt;div style="margin-bottom:5px"> &lt;strong> &lt;a href="//www.slideshare.net/ssuser15f197/201909162019-osaka-takoyaki" title="20190916大工大技術交流会2019 OSAKA TAKOYAKI" target="_blank">20190916大工大技術交流会2019 OSAKA TAKOYAKI&lt;/a> &lt;/strong> from &lt;strong>&lt;a href="https://www.slideshare.net/ssuser15f197" target="_blank">どと〜る &lt;/a>&lt;/strong> &lt;/div>
&lt;h2 id="エキスポシティハッカソンfact-real">エキスポシティハッカソン（Fact-Real）&lt;/h2>
&lt;p>発表日：2018/09/28&lt;/p>
&lt;p>エキスポシティ（大阪・吹田）にて行われました「エキスポシティハッカソン」にて発表させて頂いたスライドです（個人名等は削除させていただきました）&lt;/p>
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/quOTXlH3q3OZXK" width="592" height="333" frameborder="1" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> &lt;/iframe> &lt;div style="margin-bottom:5px"> &lt;strong> &lt;a href="//www.slideshare.net/ssuser15f197/factreal" title="エキスポシティハッカソン（Fact-Real）" target="_blank">エキスポシティハッカソン（Fact-Real）&lt;/a> &lt;/strong> from &lt;strong>&lt;a href="https://www.slideshare.net/ssuser15f197" target="_blank">どと〜る &lt;/a>&lt;/strong> &lt;/div>
&lt;h2 id="かいろせいちょうものがたり">「かいろ」せいちょうものがたり&lt;/h2>
&lt;p>発表日：2018/09/10&lt;/p>
&lt;p>制御回路交流会2018in大工大 にて発表した資料、NHK2018に向けてRobohanで行った開発のお話&lt;/p>
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/me23cDAc3u6TDD" width="592" height="333" frameborder="1" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> &lt;/iframe> &lt;div style="margin-bottom:5px"> &lt;strong> &lt;a href="//www.slideshare.net/ssuser15f197/ss-114228754" title="「かいろ」せいちょうものがたり" target="_blank">「かいろ」せいちょうものがたり&lt;/a> &lt;/strong> from &lt;strong>&lt;a href="https://www.slideshare.net/ssuser15f197" target="_blank">どと〜る &lt;/a>&lt;/strong> &lt;/div></description></item><item><title>Slackのカスタム絵文字の移行</title><link>https://www.hahahahaha-nnn.work/post/slack-emoji-move/</link><pubDate>Sun, 27 Sep 2020 02:38:54 +0900</pubDate><guid>https://www.hahahahaha-nnn.work/post/slack-emoji-move/</guid><description>&lt;p>こんにちは、どと～ること、にゎ～んです。NHK学生ロボコンもついに2021のルールが発表されましたね。&lt;/p>
&lt;p>Slackのワークスペースの移行が行われていたりしてます。&lt;/p>
&lt;p>そのSlackのワークスペース移行に当たって、「カスタム絵文字」（自分たちで追加したスタンプのこと）の移行が面倒になったりします。
移行の方法に関して、インターネットの広い海に書かれていたりしますが、Slack apiの仕様が変更になったりして方法が変わっていたので2020/09現在の方法に関して、
備忘録をかねて記載していきたいと思います。&lt;/p>
&lt;h2 id="基本環境">基本環境&lt;/h2>
&lt;p>Windows10(64bit)　2020/09/27現在&lt;/p>
&lt;p>※MacやLinuxでもNode.jsさえインストールしてしまえば同様だと思います。（未検証）&lt;/p>
&lt;h2 id="絵文字をslackからエクスポート">絵文字をSlackからエクスポート&lt;/h2>
&lt;h3 id="nodejsのインストール">Node.jsのインストール&lt;/h3>
&lt;p>
&lt;a href="https://nodejs.org/ja/" target="_blank" rel="noopener">Node.js 公式サイト&lt;/a>へアクセス、自分のPCに合うインストーラをダウンロード。（筆者は12.18.4LTSをインストール）&lt;/p>
&lt;p>インストーラがダウンロード出来たら適当にYesをクリックしていきインストールする。&lt;br>
（この時、Add PATHにチェックが入っているか確認する。）&lt;/p>
&lt;h3 id="各種モジュールインストール">各種モジュールインストール&lt;/h3>
&lt;p>下記コマンドをコマンドプロンプト/PowerShellで実行し、インストールを行う。&lt;/p>
&lt;pre>&lt;code class="language-bash">npm install slack-node
npm install request
npm install fs
&lt;/code>&lt;/pre>
&lt;h3 id="slack-api-tokenの準備">Slack API Tokenの準備&lt;/h3>
&lt;p>
&lt;a href="https://api.slack.com/" target="_blank" rel="noopener">Slack api&lt;/a>へアクセスし、画面中央の&amp;quot;Start Building&amp;quot;をクリックする。&lt;/p>
&lt;p>すると、下記画像の様に出てくるので、適当に Slack App 名を決め、インストールするワークスペースを指定し、&amp;ldquo;create app&amp;quot;をクリックする。
&lt;figure >
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/slack/emoji-app.JPG" >
&lt;img src="https://www.hahahahaha-nnn.work/img/post/slack/emoji-app.JPG" alt="" >
&lt;/a>
&lt;/figure>
&lt;/p>
&lt;p>続いて、Permissionsをクリックする。これによって、Permission管理ができる。
&lt;figure >
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/slack/emoji-app2.JPG" >
&lt;img src="https://www.hahahahaha-nnn.work/img/post/slack/emoji-app2.JPG" alt="" width="75%" >
&lt;/a>
&lt;/figure>
&lt;/p>
&lt;p>ページ中央部に&amp;quot;Scopes&amp;quot;があるので、&amp;ldquo;Add an OAuth Scope&amp;quot;をクリックし、&amp;ldquo;emoji:read&amp;quot;を追加する。(赤色下線部)&lt;br>
そして、ページ上部の&amp;quot;Install App to Workspace&amp;quot;をクリックする。
&lt;figure >
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/slack/emoji-app3.JPG" >
&lt;img src="https://www.hahahahaha-nnn.work/img/post/slack/emoji-app3.JPG" alt="" width="65%" >
&lt;/a>
&lt;/figure>
&lt;/p>
&lt;p>そして、ワークスペース連携の許可を求められるので、&lt;strong>許可&lt;/strong>する。&lt;br>
すると、&amp;ldquo;Bot User OAuth Access Token&amp;quot;が表示される。このTokenは後々使用するのでCopyしてメモる。
&lt;figure >
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/slack/emoji-app4.JPG" >
&lt;img src="https://www.hahahahaha-nnn.work/img/post/slack/emoji-app4.JPG" alt="" width="65%" >
&lt;/a>
&lt;/figure>
&lt;/p>
&lt;h3 id="インポートスクリプト作成">インポートスクリプト作成&lt;/h3>
&lt;p>インポートしたいディレクトリで、&amp;ldquo;app.js&amp;quot;といったファイル名で下記ファイルを作成する。&lt;br>
また、同じディレクトリに&amp;quot;image&amp;quot;といったディレクトリも作成する。&lt;/p>
&lt;pre>&lt;code class="language-js">var Slack = require('slack-node');
var request = require('request');
var fs = require('fs');
apiToken = &amp;quot;&amp;lt;API Token&amp;gt;&amp;quot;; // Slack APIトークンを&amp;quot; &amp;quot;内に貼り付け
slack = new Slack(apiToken);
slack.api(&amp;quot;emoji.list&amp;quot;, function (err, response) {
for(key in response.emoji){
url = response.emoji[key];
//エイリアスは無視
if(url.match(/alias/)){
continue;
}
// 取得対象の拡張子
extention = url.match(/\.[^\.]+$/);
request
.get(url)
.on('response', function (res) {
})
.pipe(fs.createWriteStream('image/' + key + extention));
}
});
&lt;/code>&lt;/pre>
&lt;h3 id="実行">実行&lt;/h3>
&lt;p>下記コマンドを実行して、カスタム絵文字のダウンロードを行う。&lt;/p>
&lt;pre>&lt;code class="language-bash">node app.js
&lt;/code>&lt;/pre>
&lt;h2 id="絵文字のslackへインポート">絵文字のSlackへインポート&lt;/h2>
&lt;h3 id="slack-custom-emoji-managerchrome拡張機能-のインストール">Slack Custom Emoji Manager(Chrome拡張機能) のインストール&lt;/h3>
&lt;p>
&lt;a href="https://chrome.google.com/webstore/detail/slack-custom-emoji-manage/cgipifjpcbhdppbjjphmgkmmgbeaggpc/related" target="_blank" rel="noopener">Slack Custom Emoji Manager(Chrome拡張機能)&lt;/a>へchrome/edge（最新版）等、chrome拡張機能が使えるブラウザでアクセスし、「chromeに追加」をクリック&lt;/p>
&lt;p>すると、https://(ワークスペース名).slack.com/customize/emoji へアクセスすると下記画像の様になる。
&amp;ldquo;ここに追加したい絵文字をドラック＆ドロップ&amp;quot;で投下すると、絵文字の追加が順次行われていく。
&lt;figure >
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/slack/slack-stamp-ext.JPG" >
&lt;img src="https://www.hahahahaha-nnn.work/img/post/slack/slack-stamp-ext.JPG" alt="" width="65%" >
&lt;/a>
&lt;/figure>
&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>以上で、Slackのカスタム絵文字の移行は完了です！&lt;/p>
&lt;p>APIは生物なので、開発の具合やユーザ要望によって仕様変更が起こるのは多々ですよね&amp;hellip;&lt;br>
今後はどうなっていくのやら🤔&lt;/p>
&lt;h2 id="参考情報">参考情報&lt;/h2>
&lt;p>chrome拡張機能を入れると、&amp;ldquo;すべての絵文字をダウンロード&amp;quot;とボタンがあるがダウンロードすることは出来ない。&lt;br>
（API仕様変更のため&amp;hellip;?，作成者様の
&lt;a href="https://qiita.com/nabekou29/items/83e11a58724517f66cad#%E3%81%A7%E3%81%8D%E3%81%9F%E3%82%82%E3%81%AE" target="_blank" rel="noopener">Qiita記事&lt;/a>にはできると書かれているのだが&amp;hellip;）&lt;/p>
&lt;p>下記サイトを参考にさせていただきました。&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://blog.ef-4.co.jp/slack-%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E7%B5%B5%E6%96%87%E5%AD%97-%E4%B8%80%E6%8B%AC%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%83%BB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC/" target="_blank" rel="noopener">Slack カスタム絵文字 一括ダウンロード・インストール方法 まとめ&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://qiita.com/nabekou29/items/83e11a58724517f66cad#%E3%81%A7%E3%81%8D%E3%81%9F%E3%82%82%E3%81%AE" target="_blank" rel="noopener">Slackのカスタム絵文字を一括ダウンロード・削除するChrome拡張を作ってみた&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Hugo Academicテーマの導入</title><link>https://www.hahahahaha-nnn.work/post/hugo_academic/</link><pubDate>Fri, 22 May 2020 00:29:36 +0900</pubDate><guid>https://www.hahahahaha-nnn.work/post/hugo_academic/</guid><description>&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>こんにちは！どと～ることにゎ～んです。&lt;/p>
&lt;p>これまでに、Hugoの環境構築の仕方、投稿の仕方と投稿を出してきました。&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://www.hahahahaha-nnn.work/post/hugo_in_windows/" target="_blank" rel="noopener">Windows上でのHugoの構築の仕方&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://www.hahahahaha-nnn.work/post/how_to_hugo_post/" target="_blank" rel="noopener">Hugoでの投稿の仕方&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これらをもとに、今回は、HugoのAcademicテーマの導入に関して記述していきたいと思います。&lt;/p>
&lt;h2 id="academic-テーマとは">Academic テーマとは&lt;/h2>
&lt;p>HugoのAcademicテーマとは、数多くあるHugoのテーマの中で最もGitHub上でスターがつけられている（らしい）&lt;/p>
&lt;p>実は本サイトでも採用しています。ブログと、個人/組織紹介を兼ねたWebサイトに向いています。&lt;/p>
&lt;h2 id="academicテーマサンプル導入">Academicテーマサンプル導入&lt;/h2>
&lt;p>それでは、実際にAcademicテーマの導入を進めて行きたいと思います。&lt;/p>
&lt;p>（以下、Hugo,gitがコマンドラインで使用可能であることを前提に話を進めていきます。）&lt;/p>
&lt;h3 id="git-clone">git clone&lt;/h3>
&lt;p>コマンドラインを開き、下記コマンドを入力します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">git clone https://github.com/sourcethemes/academic-kickstart.git Site_name&lt;/code>&lt;/pre>&lt;/div>
&lt;p>これだと、サンプル部分のみgit cloneされAcademicテーマのサブモジュール部分がcloneされないので下記コマンドを順次実行していきます。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">cd Site_name
git submodule update --init --recursive&lt;/code>&lt;/pre>&lt;/div>
&lt;p>そしたら下記コマンドを実行してみます。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">hugo server&lt;/code>&lt;/pre>&lt;/div>
&lt;p>ここまで、問題がなければ
&lt;a href="http://localhost:1313/" target="_blank" rel="noopener">http://localhost:1313/&lt;/a>にアクセスしましょう！すると下記画像のように表示されるかと思います。（大体問題になるのは、git submoduleを導入するあたりです。）&lt;/p>
&lt;figure id="figure-academicテーマ動作結果">
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/hugo/hugo-Academic.JPG" data-caption="Academicテーマ動作結果">
&lt;img src="https://www.hahahahaha-nnn.work/img/post/hugo/hugo-Academic.JPG" alt="" width="400px" >
&lt;/a>
&lt;figcaption>
Academicテーマ動作結果
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>とりあえず、Academicテーマサンプルページの導入方法は以上になります。&lt;/p>
&lt;p>このサンプルページをもとに、各種設定を行いGitHub Pageseとして公開をしていくのはまた後々のお話&amp;hellip;&lt;/p>
&lt;p>また、他のHugoテーマと同様にCSSや設定をカスタマイズすることが可能です！（このサイトでは、記事の表示幅、フォントをカスタマイズしています。）&lt;/p>
&lt;p>気が向いたら、その辺も書いていきましょうかねぇ.。o○&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;a href="https://qiita.com/harumaxy/items/58e7e4273c61e7e260b3" target="_blank" rel="noopener">Hugo + Academic テーマを使ったブログの作り方&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>所属団体 紹介</title><link>https://www.hahahahaha-nnn.work/links/</link><pubDate>Fri, 15 May 2020 17:39:04 +0900</pubDate><guid>https://www.hahahahaha-nnn.work/links/</guid><description>&lt;p>自分が、現在/過去に関連したプロジェクト等のリンク集です。&lt;br>
それぞれの活動にご賛同いただけましたらご支援等頂けますと幸いです。&lt;/p>
&lt;h2 id="現在所属しているプロジェクト">現在所属しているプロジェクト&lt;/h2>
&lt;h3 id="関西春ロボコン運営委員会">関西春ロボコン運営委員会&lt;/h3>
&lt;figure class="center" >
&lt;a data-fancybox="" href="https://pbs.twimg.com/profile_images/1455761429777489922/XN138Ukf_400x400.jpg" >
&lt;img src="https://pbs.twimg.com/profile_images/1455761429777489922/XN138Ukf_400x400.jpg" alt="" >
&lt;/a>
&lt;/figure>
&lt;h4 id="概要">概要&lt;/h4>
&lt;p>春ロボコン（関西大会）の主催団体&lt;/p>
&lt;h4 id="所属">所属&lt;/h4>
&lt;ul>
&lt;li>広報係&lt;/li>
&lt;li>資金獲得係&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>運営委員会全体のマネジメントを行っています。&lt;br>
大会の広報/資金獲得のお仕事もしています。&lt;/p>
&lt;/blockquote>
&lt;h4 id="参考リンク">参考リンク&lt;/h4>
&lt;ul>
&lt;li>Home Page：
&lt;a href="https://xn--tck4d2b0a0029dol2bn0r.com/" target="_blank" rel="noopener">https://関西春ロボコン.com/&lt;/a>&lt;/li>
&lt;li>Twitter：
&lt;a href="https://twitter.com/kansai_robocon" target="_blank" rel="noopener">@kansai_robocon&lt;/a>&lt;/li>
&lt;li>Facebook：
&lt;a href="https://facebook.com/kansai.robocon/" target="_blank" rel="noopener">@kansai.robocon&lt;/a>&lt;/li>
&lt;li>GitHub：
&lt;a href="https://github.com/Kansai-SpringRobocon" target="_blank" rel="noopener">https://github.com/Kansai-SpringRobocon&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="一般社団法人次世代ロボットエンジニア支援機構通称scramble">一般社団法人次世代ロボットエンジニア支援機構（通称：Scramble）&lt;/h3>
&lt;figure class="center" >
&lt;a data-fancybox="" href="https://scramble-robot.org/wp-content/uploads/2020/04/webpage_top_logo.png" >
&lt;img src="https://scramble-robot.org/wp-content/uploads/2020/04/webpage_top_logo.png" alt="" width="75%" >
&lt;/a>
&lt;/figure>
&lt;h4 id="概要-1">概要&lt;/h4>
&lt;p>日本のものづくりを担う次世代エンジニアの育成、およびものづくり業界・文化の活性化を目指して設立された団体。&lt;br>
&lt;strong>次世代のエンジニアとなる子ども達&lt;/strong>を、&lt;strong>大人&lt;/strong>、&lt;strong>企業または社会が&lt;/strong>協調し&lt;strong>一体となって支援、育成し界隈をさらに、&lt;/strong> &lt;br>
&lt;strong>活性化させていく&lt;/strong>。&lt;/p>
&lt;p>参考：
&lt;a href="https://scramble-robot.org/about/profile/" target="_blank" rel="noopener">一般社団法人次世代ロボットエンジニア支援機構 HP/機構について/機構の概要&lt;/a>&lt;/p>
&lt;h4 id="所属-1">所属&lt;/h4>
&lt;p>運営（専任）・広報イベントグループ イベント係&lt;/p>
&lt;blockquote>
&lt;p>運営専任で様々なイベント設計に関わっています。&lt;/p>
&lt;/blockquote>
&lt;h4 id="参考リンク-1">参考リンク&lt;/h4>
&lt;ul>
&lt;li>Home Page：
&lt;a href="https://scramble-robot.org/" target="_blank" rel="noopener">https://scramble-robot.org/&lt;/a>&lt;/li>
&lt;li>Twitter：
&lt;a href="https://twitter.com/scramble_jpn" target="_blank" rel="noopener">@scramble_jpn&lt;/a>&lt;/li>
&lt;li>Facebook：
&lt;a href="https://www.facebook.com/ScrambleRobocon/" target="_blank" rel="noopener">@ScrambleRobocon&lt;/a>&lt;/li>
&lt;li>Instagram：
&lt;a href="https://www.instagram.com/scramble_rbcn/" target="_blank" rel="noopener">@scramble_rbcn&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="過去に所属していたプロジェクト">過去に所属していたプロジェクト&lt;/h2>
&lt;h3 id="大阪大学公認ロボット製作団体-robohan">大阪大学公認ロボット製作団体 Robohan&lt;/h3>
&lt;figure class="center" >
&lt;a data-fancybox="" href="https://blog.robohan.net/logos/robohan2.png" >
&lt;img src="https://blog.robohan.net/logos/robohan2.png" alt="" >
&lt;/a>
&lt;/figure>
&lt;h4 id="概要-2">概要&lt;/h4>
&lt;p>大阪大学におけるNHK学生ロボコン優勝を目指したプロジェクト。&lt;br>
大阪大学公認のロボット製作団体でもある。&lt;/p>
&lt;h4 id="所属-2">所属&lt;/h4>
&lt;ul>
&lt;li>2016年入学&lt;/li>
&lt;li>回路班 NHK学生ロボコン2018 ピットメンバ&lt;/li>
&lt;li>会計・キャチロボ運営・関西春ロボ運営・サーバ&lt;/li>
&lt;/ul>
&lt;h4 id="参考リンク-2">参考リンク&lt;/h4>
&lt;ul>
&lt;li>ホームページ：
&lt;a href="https://www.robohan.net/" target="_blank" rel="noopener">https://www.robohan.net/&lt;/a>&lt;/li>
&lt;li>ブログ：
&lt;a href="https://blog.robohan.net/" target="_blank" rel="noopener">https://blog.robohan.net/&lt;/a>&lt;/li>
&lt;li>Twitter：
&lt;a href="https://twitter.com/Robohan_" target="_blank" rel="noopener">@Robohan_&lt;/a>&lt;/li>
&lt;li>GitHub：
&lt;a href="https://github.com/RobohanOU" target="_blank" rel="noopener">https://github.com/RobohanOU&lt;/a>&lt;/li>
&lt;li>大阪大学未来基金：
&lt;a href="https://www.miraikikin.osaka-u.ac.jp/450/" target="_blank" rel="noopener">https://www.miraikikin.osaka-u.ac.jp/450/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="ouxt-polaris">OUXT Polaris&lt;/h3>
&lt;figure class="center" >
&lt;a data-fancybox="" href="https://www.ouxt.jp/author/ouxt-polaris/avatar_hu334bf1a4a42285b66ba2952f3b2917af_13445_270x270_fill_q90_lanczos_center.jpg" >
&lt;img src="https://www.ouxt.jp/author/ouxt-polaris/avatar_hu334bf1a4a42285b66ba2952f3b2917af_13445_270x270_fill_q90_lanczos_center.jpg" alt="" >
&lt;/a>
&lt;/figure>
&lt;h4 id="概要-3">概要&lt;/h4>
&lt;p>
&lt;a href="https://www.robotx.org/" target="_blank" rel="noopener">Maritime Robotx Challenge&lt;/a>へむけて結成された学生主体のロボコンチーム。&lt;br>
&lt;a href="http://www.wam-v.com/" target="_blank" rel="noopener">WAM-V&lt;/a>といった船体に制御機器、センサーを搭載し、完全自動操縦で大会中のタスクをこなしていく。&lt;/p>
&lt;h4 id="所属-3">所属&lt;/h4>
&lt;ul>
&lt;li>2020年大会 副リーダー&lt;br>&lt;/li>
&lt;li>運営班&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>チームの運営仕事（事務仕事が主）を行っていました。&lt;br>
広報関係を主にやっていました。&lt;/p>
&lt;/blockquote>
&lt;h4 id="参考リンク-3">参考リンク&lt;/h4>
&lt;ul>
&lt;li>Home Page：
&lt;a href="https://www.ouxt.jp/" target="_blank" rel="noopener">https://www.ouxt.jp/&lt;/a>&lt;/li>
&lt;li>Twitter：
&lt;a href="https://twitter.com/OUXT_Polaris" target="_blank" rel="noopener">@OUXT_Polaris&lt;/a>&lt;/li>
&lt;li>GitHub：
&lt;a href="https://github.com/OUXT-Polaris" target="_blank" rel="noopener">https://github.com/OUXT-Polaris&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Hugo Shortcode</title><link>https://www.hahahahaha-nnn.work/pages/hugo-shortcode/</link><pubDate>Fri, 15 May 2020 16:40:00 +0900</pubDate><guid>https://www.hahahahaha-nnn.work/pages/hugo-shortcode/</guid><description>&lt;p>このページでは、Hugoでよく使われるShortCodeについて書いて行きます。&lt;/p>
&lt;h2 id="figure">figure&lt;/h2>
&lt;p>{{&amp;lt; figure src=&amp;rdquo;/img/pages/hugo-shortcode/avatar.jpg&amp;rdquo; title=&amp;quot;画像投稿サンプル&amp;rdquo; width=&amp;quot;150px&amp;rdquo;&amp;gt;}}&lt;/p>
&lt;h3 id="出力例">出力例&lt;/h3>
&lt;figure id="figure-画像投稿サンプル">
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/pages/hugo-shortcode/avatar.jpg" data-caption="画像投稿サンプル">
&lt;img src="https://www.hahahahaha-nnn.work/img/pages/hugo-shortcode/avatar.jpg" alt="" width="150px" >
&lt;/a>
&lt;figcaption>
画像投稿サンプル
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="パラメータ">パラメータ&lt;/h3>
&lt;h4 id="src">src&lt;/h4>
&lt;p>/static/以下のファイルパス&lt;/p>
&lt;h4 id="title">title&lt;/h4>
&lt;p>画像につけるタイトル&lt;/p>
&lt;h3 id="width">width&lt;/h3>
&lt;p>画像幅(px,%で指定可能)&lt;/p>
&lt;!--## High
-->
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>shortcodeに関する公式リファレンス：
&lt;a href="https://gohugo.io/content-management/shortcodes/" target="_blank" rel="noopener">https://gohugo.io/content-management/shortcodes/&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Hugoでの投稿の仕方</title><link>https://www.hahahahaha-nnn.work/post/how_to_hugo_post/</link><pubDate>Fri, 15 May 2020 00:27:50 +0900</pubDate><guid>https://www.hahahahaha-nnn.work/post/how_to_hugo_post/</guid><description>&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>こんにちは、どと～ることにゎ～んです。さて以前、HugoをWindows上で環境構築する方法を示しました。今回はHugoを使ってプロジェクトを作成する方法を示したいと思います。&lt;/p>
&lt;h2 id="hugoプロジェクトの作成">Hugoプロジェクトの作成&lt;/h2>
&lt;p>PowerShell、Terminalなど使用OSにおけるコマンドコンソール（以下、コマンドライン）を開き、プロジェクトを作成したいディレクトリにcdやmkdirを使用して移動します。移動した先で、
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">hugo new site test&lt;/code>&lt;/pre>&lt;/div>
と実行します。すると、そのディレクトリに、&lt;strong>test&lt;/strong>といったフォルダが作成されます。その中身をtreeコマンドを用いて確認すると、
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">test
├─archetypes
├─content
├─data
├─layouts
├─resources
│ └─_gen
│ ├─assets
│ └─images
├─static
└─themes&lt;/code>&lt;/pre>&lt;/div>
といった階層になっているのが確認できます。&lt;/p>
&lt;h2 id="テーマ導入">テーマ導入&lt;/h2>
&lt;p>これでプロジェクトは完成しましたが、これではサイトとして表示されないので、テーマを導入していきたいと思います。ここでは、cupperといったシンプルなテーマを使用していきます。コマンドラインで、
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">cd test/themes&lt;/code>&lt;/pre>&lt;/div>
とthemesディレクトリに移動します。
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">git clone https://github.com/zwbetz-gh/cupper-hugo-theme.git&lt;/code>&lt;/pre>&lt;/div>
として、git上から拾ってきます。&lt;/p>
&lt;h2 id="設定ファイル編集">設定ファイル編集&lt;/h2>
&lt;p>先ほど、git clone してきたテーマを利用するために、設定ファイルの記述を行います。設定ファイルは、test/config.tomlです。これを開くと、
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">baseURL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://example.org/&amp;#34;&lt;/span>
languageCode &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;en-us&amp;#34;&lt;/span>
title &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;My New Hugo Site&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
となっています。これを、
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">baseURL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://localhost:1313/&amp;#34;&lt;/span>
languageCode &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;jp&amp;#34;&lt;/span>
title &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;My New Hugo Site&amp;#34;&lt;/span>
theme &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;cupper-hugo-theme&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
と、変更します。それぞれの設定項目は以下のようです。&lt;/p>
&lt;ul>
&lt;li>baseURL：サイトのURL（今回の場合は、ローカル環境での動作環境を行うため上記設定）&lt;/li>
&lt;li>languageCode：デフォルト言語&lt;/li>
&lt;li>title：サイトタイトル&lt;/li>
&lt;li>theme：使用するテーマ名（/themese/ディレクトリに存在するフォルダ名）&lt;/li>
&lt;/ul>
&lt;h2 id="新しいページ生成">新しいページ生成&lt;/h2>
&lt;p>さて、使用するテーマまで設定することができたので、新しいページを生成していきたいと思います。
コマンドラインで、
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">cd test&lt;/code>&lt;/pre>&lt;/div>
とtestディレクトリに移動し、
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">hugo new test.md&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>と入力します。すると、&lt;strong>/test/content/&lt;/strong> に &lt;strong>test.md&lt;/strong>といったファイルが生成されます。このファイルを開くと、&lt;/p>
&lt;p>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-markdown" data-lang="markdown">---
title: &amp;#34;Test&amp;#34;
date: 2020-05-15T00:32:24+09:00
draft: true
---&lt;/code>&lt;/pre>&lt;/div>
となっています。この下に、下記のように入力してみます。
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-markdown" data-lang="markdown">---
title: &amp;#34;Test&amp;#34;
date: 2020-05-15T00:32:24+09:00
draft: false
---
&lt;span style="color:#75715e">## これはテストです
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
ページ中のコンテンツはこの様に表示されます。&lt;/code>&lt;/pre>&lt;/div>
保存したのち、コマンドラインに下記のコマンドを入力します。
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">hugo server&lt;/code>&lt;/pre>&lt;/div>
そして、
&lt;a href="http://localhost:1313/test/" target="_blank" rel="noopener">http://localhost:1313/test/&lt;/a> にアクセスします。すると、下記画像のように投稿が反映されたことが分かります！
&lt;figure id="figure-アクセスした様子">
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/hugo/hugo-testPage.JPG" data-caption="アクセスした様子">
&lt;img src="https://www.hahahahaha-nnn.work/img/post/hugo/hugo-testPage.JPG" alt="" >
&lt;/a>
&lt;figcaption>
アクセスした様子
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h2 id="静的なページ生成">静的なページ生成&lt;/h2>
&lt;p>先述の部分で、ローカル環境での確認ができたので続いて、Web上に公開するためにhtmlやcssを生成する方法を記述していきます。コマンドラインで/test/ディレクトリ上にて、
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">hugo&lt;/code>&lt;/pre>&lt;/div>
と、入力します。すると&amp;hellip; &lt;strong>/test/public/&lt;/strong> といったディレクトリが生成されます。この中に、&lt;strong>index.html&lt;/strong> や &lt;strong>/test/index.html&lt;/strong>(先ほど示したtestページ)が生成されました！&lt;/p>
&lt;p>以上で、htmlの生成まで出来たのでapache2やnginxを使ってサーバ上にファイルを置いて閲覧することができるようになったかと思います。&lt;/p>
&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>次回(近いうちに…)、Hugoを使ったテンプレートページでの開発のお話を書いていきたいと思います。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>Hugoでのテーマ追加方法：
&lt;a href="https://qiita.com/yakimeron/items/42d537374abde5517267" target="_blank" rel="noopener">https://qiita.com/yakimeron/items/42d537374abde5517267&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>BroadFiler</title><link>https://www.hahahahaha-nnn.work/post/broadfiler/</link><pubDate>Tue, 12 May 2020 00:00:17 +0900</pubDate><guid>https://www.hahahahaha-nnn.work/post/broadfiler/</guid><description>&lt;h1 id="はじめに">はじめに&lt;/h1>
&lt;p>こんにちは！どと～ることにゎ～んです。さて、皆さんはWindowsを日ごろ使用しているかと思います。（Macユーザ/Ubuntu(Linux)ユーザもいらっしゃるかと思いますが、本記事はWindowsユーザ向け記事です&amp;hellip;）&lt;/p>
&lt;p>しかし、Windowsのデフォルトのファイルソフト（ファイラー）である、Windows Explorer ですが、作業を進めていくうちにWindow数が多くなっていき、&lt;strong>自分がどのフォルダを開いているか分からなくなる&lt;/strong>ことが多々あるかと思います。そこで、今回は「BroadFiler」を用いて&lt;strong>タブ&lt;/strong>、&lt;strong>グループ&lt;/strong>を使ったファイル操作管理を行っていこうと思います。&lt;/p>
&lt;h1 id="インストールの仕方">インストールの仕方&lt;/h1>
&lt;h2 id="インストーラーをダウンロード">インストーラーをダウンロード&lt;/h2>
&lt;p>まず、
&lt;a href="https://www.vector.co.jp/soft/dl/winnt/util/se490120.html" target="_blank" rel="noopener">ダウンロードサイト&lt;/a>にアクセスし、画面中央にある、ダウンロードページへをクリックします。&lt;/p>
&lt;p>続いて、&lt;strong>このソフトを今すぐダウンロード&lt;/strong>をクリックします。&lt;/p>
&lt;p>すると、zip形式でインストーラーをダウンロードできるので、展開します。&lt;/p>
&lt;figure id="figure-zipファイルを展開した結果">
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/BroadFiler/zip.JPG" data-caption="zipファイルを展開した結果">
&lt;img src="https://www.hahahahaha-nnn.work/img/post/BroadFiler/zip.JPG" alt="" >
&lt;/a>
&lt;figcaption>
zipファイルを展開した結果
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="インストーラーを実行">インストーラーを実行&lt;/h2>
&lt;p>展開した結果、様々なファイルがありますが&lt;strong>steup.exe&lt;/strong>を実行するだけで大丈夫です。（他の解凍ソフトはうまくセットアップできなかった時のものらしい）&lt;/p>
&lt;p>setup.exeを実行したら、「次へ」「同意する」を押していくとセットアップできます。
&lt;figure id="figure-インストール完了した結果">
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/BroadFiler/end-install.JPG" data-caption="インストール完了した結果">
&lt;img src="https://www.hahahahaha-nnn.work/img/post/BroadFiler/end-install.JPG" alt="" >
&lt;/a>
&lt;figcaption>
インストール完了した結果
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h1 id="では実際に実行してみましょう">では、実際に実行してみましょう&lt;/h1>
&lt;p>それでは、実際に実行してみたいと思います。下記画像のようなアイコンが存在すると思うので実行してみます。
なお、ここで注意してほしいのは、右クリックして&lt;strong>管理者として実行&lt;/strong>することです。&lt;/p>
&lt;figure id="figure-アイコン">
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/BroadFiler/ico.png" data-caption="アイコン">
&lt;img src="https://www.hahahahaha-nnn.work/img/post/BroadFiler/ico.png" alt="" >
&lt;/a>
&lt;figcaption>
アイコン
&lt;/figcaption>
&lt;/figure>
&lt;h1 id="感想">感想&lt;/h1>
&lt;p>Windwos Explorerにはない、&lt;strong>タブ機能&lt;/strong>、&lt;strong>グループ機能&lt;/strong>がありその辺を欲してる人にとってはとてもありがたいソフトになってるかと思います。&lt;/p>
&lt;figure id="figure-実行した結果">
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/BroadFiler/show.JPG" data-caption="実行した結果">
&lt;img src="https://www.hahahahaha-nnn.work/img/post/BroadFiler/show.JPG" alt="" >
&lt;/a>
&lt;figcaption>
実行した結果
&lt;/figcaption>
&lt;/figure>
&lt;p>そういえば、だいぶ以前にWindows Explorerにタブ機能が実装されるという話があったのですけどどうなったんですかね&amp;hellip;&lt;/p></description></item><item><title>Hugo(Windows)セットアップ</title><link>https://www.hahahahaha-nnn.work/post/hugo_in_windows/</link><pubDate>Fri, 08 May 2020 12:15:00 +0900</pubDate><guid>https://www.hahahahaha-nnn.work/post/hugo_in_windows/</guid><description>&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>こんにちは！どと～ること、にゎ～んです。さて、今日はhugoのWindowsでの環境構築のやり方について記述していきたいと思います。&lt;/p>
&lt;h2 id="hugoとは">Hugoとは&lt;/h2>
&lt;p>導入として、Hugoの紹介。Hugoとは、「静的ファイルでサイトを作るための支援ツール」です。
他のWebページ作成ツールとして、Wordpressなどありますがこれらのサイトにはデータベース等が必要となり、保守/管理といった点からも煩雑さが目立ちます。[1]&lt;/p>
&lt;p>基本的に、HugoのサイトはMarkDown（GitHubとかのReadMe.mdとか）形式で記述することができ、記述の容易性等も挙げることができるかと思います。&lt;/p>
&lt;h2 id="windows上でのhugoの環境構築">Windows上でのHugoの環境構築&lt;/h2>
&lt;p>Windows上のhugo環境構築方法として下記の2種類を用いた方法があるそうです。[2]&lt;/p>
&lt;ul>
&lt;li>scoop&lt;/li>
&lt;li>Chocolatey&lt;/li>
&lt;/ul>
&lt;p>それぞれ、UbuntuやCentOSで言うところのaptやyumといったパッケージ管理ソフトだそうです。（筆者もよくわかってませんけど、できたからよし！！！）今回ではscoopを用いた方法にしてみたいと思います。&lt;/p>
&lt;h2 id="下準備scoopの環境構築">（下準備）scoopの環境構築&lt;/h2>
&lt;p>それでは、下準備としてscoopの環境構築を行っていきたいと思います。
まず、PowerShellを起動します。&lt;/p>
&lt;p>そして、続いて下記コマンドを実行します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
iwr -useb get.scoop.sh | iex&lt;/code>&lt;/pre>&lt;/div>
&lt;p>以上で完了です！！！早いですね、簡単ですね、誰でもできそうですね。&lt;/p>
&lt;h3 id="確認方法">確認方法&lt;/h3>
&lt;p>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">scoop help&lt;/code>&lt;/pre>&lt;/div>
これで、Scoopの各種コマンドの確認ができます。&lt;/p>
&lt;h3 id="powershell管理者権限に関して">PowerShell管理者権限に関して&lt;/h3>
&lt;p>サイトによっては、&amp;ldquo;管理者権限で&amp;quot;って記述も見られますが、Hugoの環境構築を行いたい場合は普通の状態で構いません
ってか、管理者権限で環境構築すると、管理者として今後走らせないといけない煩雑さが生まれたりもする？*要検証&lt;/p>
&lt;h2 id="hugoの環境構築">Hugoの環境構築&lt;/h2>
&lt;p>それでは、続いてHugoの環境構築を行っていきます。Hugoには、&amp;lsquo;&amp;lsquo;&amp;lsquo;Hugo'&amp;lsquo;&amp;lsquo;と'&amp;lsquo;&amp;lsquo;Hugo Extended'&amp;lsquo;&amp;lsquo;と2種類存在します。&lt;/p>
&lt;p>特に理由がない場合は、&amp;lsquo;&amp;lsquo;&amp;lsquo;Hugo Extended'&amp;lsquo;&amp;lsquo;のインストールをおすすめします。（上位互換のため&amp;hellip;）一部のテーマは、&amp;lsquo;&amp;lsquo;&amp;lsquo;Hugo Extended'&amp;lsquo;&amp;lsquo;でないとコンパイルできないときがあります。&lt;/p>
&lt;p>インストールには下記のコマンドをPowerShellで実行すれば大丈夫です。[3]&lt;/p>
&lt;h3 id="hugo-extended">Hugo Extended&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">scoop install hugo-extended&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="hugo">Hugo&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Shell" data-lang="Shell">scoop install hugo-extended&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>以上で、HugoのWindows上に環境構築する方法はおしまいです！これであなたも静的な安定したWebページライフを！&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://knowledge.sakura.ad.jp/22908/">https://knowledge.sakura.ad.jp/22908/&lt;/a>
&lt;ul>
&lt;li>Hugoに関する紹介に使用させていただきました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://qiita.com/Dooteeen/items/12dc8fb14042888113d0">https://qiita.com/Dooteeen/items/12dc8fb14042888113d0&lt;/a>
&lt;ul>
&lt;li>Scoopのインストール方法を参考にさせて頂きました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gohugo.io/getting-started/installing/">https://gohugo.io/getting-started/installing/&lt;/a>
&lt;ul>
&lt;li>hugo公式ドキュメント、windowsでの環境構築のお話が書かれている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>投稿方針/サイト移設に関して</title><link>https://www.hahahahaha-nnn.work/post/first-post/</link><pubDate>Thu, 30 Apr 2020 00:15:41 +0900</pubDate><guid>https://www.hahahahaha-nnn.work/post/first-post/</guid><description>&lt;p>お久しぶりです！どと～ること、にゎ～んです。&lt;/p>
&lt;p>さて、以前より運営していたどと～るブログの方ですが、諸般の事情によりサイトを閉鎖しました。まぁ、その辺の事情等は後々書いていこうかと思っていたりもします。&lt;/p>
&lt;p>以前のサイトと同様に技術系に関することを中心に記述していきたいと思います。流し読み程度にご覧いただければと思いますのでよろしくお願いします.。o○&lt;/p></description></item><item><title>春ロボコン（関西大会）2021 ストリーミング配信に関して</title><link>https://www.hahahahaha-nnn.work/post/harurobo-streaming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hahahahaha-nnn.work/post/harurobo-streaming/</guid><description>&lt;p>どうもです、どと～ることにゎ～んです。昨年3/12に京都府南丹市園部町にて、「春ロボコン2021（関西大会）」が開催されました。&lt;/p>
&lt;p>私は、運営委員会代表として参加しつつ配信を担当していました。その時の知見も含めてメモがてら書き記していこうかとおもいます。(記事投稿が遅くなり、今更..感もありますがぜひご覧ください)&lt;/p>
&lt;h2 id="環境">環境&lt;/h2>
&lt;p>今回、使用したデスクトップ環境を下記に示します。&lt;/p>
&lt;ul>
&lt;li>Windows 10&lt;/li>
&lt;li>CPU：Intel Core &lt;a href="mailto:i7-3770K@3.50GHz">i7-3770K@3.50GHz&lt;/a>&lt;/li>
&lt;li>RAM：16GB&lt;/li>
&lt;li>GPU：NVIDIA GeForce GTX1060 6GB&lt;/li>
&lt;/ul>
&lt;p>CPUはIvy Bridgeですが，i7のパワーで殴ってる（？）感じですね．GPUも搭載したデスクトップで今回は臨みました。&lt;/p>
&lt;h2 id="構成">構成&lt;/h2>
&lt;p>続いて、システム構成のお話を書いていきます。今回の配信では、
&lt;a href="https://obsproject.com/ja" target="_blank" rel="noopener">OBS Studio&lt;/a>を用いて、&lt;/p>
&lt;p>複数カメラのコネクションやテロップ出し、YouTubeへのストリーミング設定を行いました。その時の配信構成の概要を下記に示します。&lt;/p>
&lt;figure id="figure-配信構成">
&lt;a data-fancybox="" href="https://www.hahahahaha-nnn.work/img/post/harurobo/harurobo-streaming.png" data-caption="配信構成">
&lt;img src="https://www.hahahahaha-nnn.work/img/post/harurobo/harurobo-streaming.png" alt="" width="75%" >
&lt;/a>
&lt;figcaption>
配信構成
&lt;/figcaption>
&lt;/figure>
&lt;p>この図を見ても分かる様に、3台のPCを用い、それぞれの映像をHDMI-USBキャプチャを用いて、画面のキャプチャーを行いました。そのため、下記商品を用いました。&lt;/p>
&lt;iframe style="width:50%;height:360px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=hahahahahannn-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B08LNVN7D6&amp;linkId=bd23a1d04db1e644ef5ed02c5a0f05cf">&lt;/iframe>
&lt;p>2,000円ちょっとでHDMIをキャプチャーできるのはいいですね〜USBで動画入力するのでUSBカメラと同様の入力で扱えます！&lt;/p>
&lt;p>使用した感じ、たまに接触不良が起きたりはしたのですが、振動で抜けないようにすれば大丈夫でした！&lt;/p>
&lt;p>LTEネットワークはレンタルのポケットWi-Fiを使いました。20GB容量があるものを用いましたが、容量は非常に余裕がありました。&lt;/p>
&lt;h2 id="実際に運用させてみて">実際に運用させてみて&lt;/h2>
&lt;p>さて、上記の構成で
&lt;a href="https://nishihonme.localinfo.jp/" target="_blank" rel="noopener">京都府南丹市あかまつの丘 西本梅&lt;/a>にて、運用してみました！&lt;/p>
&lt;p>当初、配信はうまく行きましたが、途中から雨が降り始めるとLTE通信が不安定になり、通信途絶して配信が止まってしまいました&amp;hellip;&lt;/p>
&lt;p>下記動画は配信の模様を再編集したものになります。ぜひご覧ください〜&lt;/p>
&lt;iframe width="80%" height="400" src="https://www.youtube.com/embed/__SM6BA3woo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;h2 id="反省点">反省点&lt;/h2>
&lt;p>はじめ、配信はうまく行っており、音飛び等発生していなかったので構成は悪くなかったです。ただ、LTE通信が途中で途絶してしまうトラブルが非常に痛かったです&amp;hellip;&lt;/p>
&lt;p>&lt;strong>配信するなら有線環境を用意しよう！&lt;/strong> 録画して、配信する形式など別の方法も考えられます。（でもライブ感は残したい&amp;hellip;）&lt;/p>
&lt;h2 id="最後に">最後に&lt;/h2>
&lt;p>春ロボコン2021（関西大会）で配信ノウハウの最低限を得ることはできました。本年3月にも、同会場で春ロボコン2022（関西大会）が開催されます。&lt;/p>
&lt;p>2022年1月上旬現在、一般観客来場可能となるように準備を進めています！ぜひ、ご来場ください！&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">あけましておめでとうございます🎍&lt;br>本年もよろしくお願いいたします🙇&lt;br>&lt;br>さて、春ロボコン2022（関西大会）は、&lt;br>本年3月11日に、京都府南丹市にて開催予定です！&lt;br>参加選手だけでなく、一般観客も入場可能になるよう準備を進めています🙌&lt;br>&lt;br>是非とも皆さまお越しください🚙&lt;a href="https://twitter.com/hashtag/%E6%98%A5%E3%83%AD%E3%83%9C%E3%82%B3%E3%83%B3?src=hash&amp;amp;ref_src=twsrc%5Etfw">#春ロボコン&lt;/a> &lt;a href="https://twitter.com/hashtag/%E9%96%A2%E8%A5%BF%E6%98%A5%E3%83%AD%E3%83%9C%E3%82%B3%E3%83%B3?src=hash&amp;amp;ref_src=twsrc%5Etfw">#関西春ロボコン&lt;/a> &lt;a href="https://t.co/0bfu7wvmlb">pic.twitter.com/0bfu7wvmlb&lt;/a>&lt;/p>&amp;mdash; 春ロボコン（関西大会） (@kansai_robocon) &lt;a href="https://twitter.com/kansai_robocon/status/1477112594905255936?ref_src=twsrc%5Etfw">January 1, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></description></item></channel></rss>